{"version":3,"sources":["images/reactLogo.svg","images/c137Rick.jpg","images/copRick.jpg","images/doofusRick.jpg","images/evilRick.jpg","images/futureRick.jpg","images/pastRick.jpg","images/pickleRick.jpg","images/simpleRick.jpg","images/slowRick.jpg","images/teacherRick.jpg","images/tinyRick.jpg","images/wonkaRick.jpg","components/Nav/Nav.js","components/Banner/Banner.js","components/Character/Character.js","components/Container/Container.js","images.js","components/Game.js","index.js"],"names":["module","exports","__webpack_require__","p","Nav","props","react_default","a","createElement","Fragment","className","href","src","reactLogo","alt","navMsgColor","navMessage","score","highScore","Banner","Character","flip","onClick","event","clickEvent","target","name","Container","shake","characters","map","i","components_Character_Character","key","images","c137Rick","copRick","doofusRick","evilRick","futureRick","pastRick","pickleRick","simpleRick","slowRick","teacherRick","tinyRick","wonkaRick","Game","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffledArr","length","push","splice","Math","floor","random","guess","_this2","this","prevState","shuffle","includes","setState","setTimeout","components_Nav_Nav","components_Banner_Banner","components_Container_Container","Component","ReactDOM","render","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.c3fdd602.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reactLogo.167e3e09.svg\";","module.exports = __webpack_public_path__ + \"static/media/c137Rick.fcefdccb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/copRick.c4310002.jpg\";","module.exports = __webpack_public_path__ + \"static/media/doofusRick.1350eb04.jpg\";","module.exports = __webpack_public_path__ + \"static/media/evilRick.353b0fb2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/futureRick.f39224b3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pastRick.2f941f41.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pickleRick.9a74d2a4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/simpleRick.41730458.jpg\";","module.exports = __webpack_public_path__ + \"static/media/slowRick.eb4716f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/teacherRick.519d4459.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tinyRick.a72532f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wonkaRick.0fef258e.jpg\";","import React from \"react\";\r\nimport \"./Nav.css\";\r\nimport reactLogo from \"../../images/reactLogo.svg\";\r\n\r\nconst Nav = props => (\r\n    <>\r\n        <nav className=\"navbar navbar-expand-lg justify-content-between fixed-top py-0\">\r\n            <div className=\"navbar-brand\" href=\"/\">Click That Rick</div>\r\n            <div className=\"d-flex align-items-center text-center\">\r\n                <img className=\"react-logo\" src={reactLogo} alt=\"logo\"/>\r\n                <div className={\"nav-msg mx-2 \"+ props.navMsgColor}>{ props.navMessage }</div>\r\n                <img className=\"react-logo\" src={reactLogo} alt=\"logo\"/>\r\n            </div>\r\n            <div className=\"score\">Score: { props.score } <span className=\"pipe\">|</span>  High Score: { props.highScore }</div>\r\n        </nav>\r\n    </>\r\n);\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => (\r\n    <>\r\n        <div className=\"banner d-flex align-items-end justify-content-center text-center\"></div>\r\n        <div className=\"banner-text text-center pt-3 pb-2\">Challenge your memory... try not to click the same Rick more than once!</div>\r\n    </>\r\n)\r\n\r\nexport default Banner;","import React from \"react\";\r\nimport \"./Character.css\";\r\n\r\n// Define onClick funtion as cb so clicked element value can be passed to props.clickEvent to check if clicked or not\r\nconst Character = props => (\r\n    <>\r\n        <div className={\r\n            props.flip\r\n            ? \"card p-0 flip\"\r\n            : \"card p-0\"\r\n        } onClick={event => props.clickEvent(event.target.src)}>\r\n            <div className=\"card-inner\">\r\n                <img className=\"img-fluid image\" src={props.name} alt=\"Rick\"/>  \r\n            </div>\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default Character;","import React from \"react\";\r\nimport \"./Container.css\";\r\nimport Character from \"../Character\";\r\n\r\nconst Container = props => (\r\n    <div className={ \r\n        props.shake\r\n            ? \"container d-flex flex-wrap justify-content-center p-0 shake\" \r\n            : \"container d-flex flex-wrap justify-content-center p-0\"\r\n        }\r\n    > \r\n        {props.characters.map((a, i) => <Character name={a} key={i} flip={props.flip} clickEvent={props.clickEvent}/>)}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import c137Rick from \"./images/c137Rick.jpg\";\r\nimport copRick from \"./images/copRick.jpg\";\r\nimport doofusRick from \"./images/doofusRick.jpg\";\r\nimport evilRick from \"./images/evilRick.jpg\";\r\nimport futureRick from \"./images/futureRick.jpg\";\r\nimport pastRick from \"./images/pastRick.jpg\";\r\nimport pickleRick from \"./images/pickleRick.jpg\";\r\nimport simpleRick from \"./images/simpleRick.jpg\";\r\nimport slowRick from \"./images/slowRick.jpg\";\r\nimport teacherRick from \"./images/teacherRick.jpg\";\r\nimport tinyRick from \"./images/tinyRick.jpg\";\r\nimport wonkaRick from \"./images/wonkaRick.jpg\";\r\n\r\nconst images = [\r\n    c137Rick,\r\n    copRick,\r\n    doofusRick,\r\n    evilRick,\r\n    futureRick,\r\n    pastRick,\r\n    pickleRick,\r\n    simpleRick,\r\n    slowRick,\r\n    teacherRick,\r\n    tinyRick,\r\n    wonkaRick\r\n];\r\n\r\nexport default images;","import React, { Component } from \"react\";\r\nimport Nav from \"./Nav\";\r\nimport Banner from \"./Banner\";\r\nimport Container from \"./Container\";\r\nimport images from \"../images\"\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        // Initial score / high score\r\n        score: 0,\r\n        highScore: 0,\r\n\r\n        // Initial navbar message / color\r\n        navMessage: \"Click a Rick to begin\",\r\n        navMsgColor: \"\",\r\n\r\n        // Store array of shuffled img urls\r\n        allCharacters: this.shuffleArray(),\r\n\r\n        // Store each clicked item\r\n        wasClicked: [],\r\n\r\n        // Shake container / flip cards on incorrect\r\n        shake: false,\r\n        flip: false\r\n    };\r\n\r\n    // Bind current this to checkClicked to pass to Character component\r\n    clickEvent = this.checkClicked.bind(this);\r\n\r\n    // Shuffle img urls\r\n    shuffleArray() {\r\n\r\n        // Create copy of current array to modify by value\r\n        const newArr = images.slice();\r\n\r\n        // Create new array to store shuffled data\r\n        const shuffledArr = [];\r\n\r\n        // Loop thru newArr and get random index based on current length then splice val from newArr and push to shuffledArr\r\n        while (newArr.length > 0) {\r\n            shuffledArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\r\n        }\r\n\r\n        return shuffledArr;\r\n    }\r\n\r\n    // Check clicked item and return state\r\n    checkClicked(guess) {\r\n\r\n        // Create copy of wasClicked array to modify by value\r\n        const prevState = this.state.wasClicked.slice();\r\n\r\n        // Shuffle images\r\n        const shuffle = this.shuffleArray();\r\n\r\n        // Track score\r\n        let score = this.state.score;\r\n        let highScore = this.state.highScore;\r\n\r\n        // If user guess is not found in wasClicked\r\n        if (!this.state.wasClicked.includes(guess)) {\r\n\r\n            // Store clicked items\r\n            prevState.push(guess);\r\n\r\n            // Handle score\r\n            if(score === highScore) {\r\n                score ++;\r\n                highScore++;\r\n            } else {\r\n                score++;\r\n            }\r\n\r\n            // Hanlde correct state\r\n            this.setState({\r\n                score: score,\r\n                highScore: highScore,\r\n                navMessage: \"Correct\",\r\n                navMsgColor: \"success\",\r\n                allCharacters: shuffle,\r\n                wasClicked: prevState,\r\n                shake: false,\r\n            });\r\n            return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\r\n        }\r\n        \r\n        // If user guess is found in wasClicked\r\n        if (this.state.wasClicked.includes(guess)) {\r\n\r\n            // Hanlde score\r\n            let score = 0;\r\n\r\n            // Handle incorrect state\r\n            this.setState({\r\n                score: score,\r\n                highScore: highScore,\r\n                navMessage: \"Incorrect\",\r\n                navMsgColor: \"fail\",\r\n                allCharacters: shuffle,\r\n                wasClicked: [],\r\n                shake: true,\r\n                flip: true\r\n            });\r\n            return setTimeout(() => this.setState({ navMsgColor: \"\", flip: false }), 500)\r\n        }\r\n    }\r\n    render() {\r\n        const state = this.state\r\n        return (\r\n            <>\r\n                <Nav \r\n                    score={state.score}\r\n                    highScore={state.highScore}\r\n                    navMessage={state.navMessage}\r\n                    navMsgColor={state.navMsgColor}\r\n                />\r\n                <Banner />\r\n                <Container\r\n                    shake={state.shake}\r\n                    flip={state.flip}\r\n                    characters={state.allCharacters}\r\n                    clickEvent={this.clickEvent}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Game from \"./components/Game\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}